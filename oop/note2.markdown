# 写在前面的话
- 合作图书[Python编程从入门到实践]
# oop -python面向对象
- 面向对象编程
    - 基础
    - 公有私有
    - 继承
    - 组合， Minxi
- 魔法函数
    - 魔法函数概述
    - 构造类魔法函数
    - 运算类魔法函数
# 1 面向对象概述 （objectorigented,oo)
- OO思想
    -接触到任意一个任务，首先想到的是任务这个世界的构成，是由模型构成的
- 记住几个名词
    - oo:面向对象
    - OOA：面向对象的分析
    - OOD：面向对象的设计
    - OOI：面向对象的实现
    - OOP：面向对象的编程
    -面向对象的实现过程：OOA-> OOD -> OOI -> OOP 
- 类和对象的概念
    - 类： 抽象名词，代表一个集合，共性的事物（如学生，它不是个体，是有共性的群体）
    - 对象： 具象的事物，单个个体，（如小月，它是一个学生）
    - 类和对象的关系：对象是类里面的一个个体
    - 类中的内容应该有两个：
        - 表明事物的特征，叫做属性（变量）
        - 表明事物的动能或动作，叫做成员方法（函数）
# 2 类的基本实现
- 类的命名
    - 遵守变量名的规范
    - 大驼峰（由一个或多个单词构成，每个单词的首字母需要大写，单词跟单词之间直接向量）
    - 尽量避免系统命名相似的命名
- 如何申明一个类
    - 必须用class关键字
    - 类由属性和方法构成，其他不允许出现
    - 成员属性定义可以直接使用变量赋值，如果没有值，可以使用None
    - 案例 01.py  
    # class PythonStudent():
-实例化类
     变量=类名（） #实例化了一个对象  
   # 举例：misky = PythonStudent()
-访问对象成员（就是访问对象能干的事情）
    - 使用点操作符
    #举例：misky.name
        obj.成员属性名称
        obj.成员方法
    - 可以通过默认内置变量检测类和对象的所有成员
        -对象所有成员检查
        obj._dict_ #dict前后各有两个下划线
    - 类所有的成员
        class_name.dict_
# 3 anaconda基本使用
- anaconda主要是一个虚拟环境管理器
- 还是一个安装包管理器
- conda list :显示anaconda安装包   
- conda env list: 显示anaconda的虚拟环境列表  
- conda create -n xxx python=3.6：创建一个Python版本为3.6，名称为XXX的虚拟环境
- source activate xxx :启用XXX的虚拟环境

# 4 类和对象的成员分析
- 类和对象都可以存储成员，成员可以归类所有，也可以归对象所有
- 类存储成员的时候，使用的是与类关联的一个对象
- 独享存储成员是存储在当前对象
- 对象访问一个成员的过程是：如果对象中没有该成员，则尝试访问类中的同名成员；如果有此成员，一定要使用对象中的成员，（先子集，后合集)
- 创建对象的时候，类中的成员不会放入对象中，而是得到一个空的对象，没有成员
- 通过对象，可以对类中的成员重新赋值，通过对象添加成员时，对应成员只保存在对象中，而不会修改类成员

# 5 关于self
- self在对象的方法中,表示当前对象本身，如果通过对象表用一个方法，那么该对象会自动传入到当前方法的第一个参数中。
- self并不是关键字，只是一个用于接受对象的普通参数，理论上可以用任何一个普通变量名代替。
- 使用的方法中，如果有self形参就是非绑定，如果没有self，则为绑定类的方法
- 使用类访问绑定类的方法是，（类名.函数）如果类方法中需要访问当前类的成员，可以通过__class__成员名的方法

# 6 面向对象的三大特性：封装，继承，多态
## 6.1封装
   - 封装就是对对象的成员进行访问的限制
    - 封装的三个级别
        - 公开（public）
        - 受保护的（protected）
        - 私有的 （private）
        - 以上三个单词不是关键词，
    -判别对象的位置（范围）
        - 对象内部
        - 对象外部
        - 子类中
    - 私有
        - 私有成员是最高级别的封装，只能在当前这个类或对象中访问
        - 实现：在成员前面添加两个下划线即可
        - 举个例子看：
            class Person():
            name = "sky" #这个是公用的
            __age = 18  #两个下划线，这个是私有
        -python的私有，实现方法是改名策略，后台换了个名字，所以访问不到,可以使用__dict__去查询到
- 继承
    - 子类继承了父类的所有属性和方法，子类成为父类下面的一种特殊版本，如电动车类是汽车类的一种，子集
    - 创建一个子类—举例子、、、（父类必须在当前文件中） class ElectricCar(Car):
    - 第一步：初始化分类的属性【def __int__(self,name,age,sex)】
      第二步：利用super函数将父类和子类关联，【super().__int__(name,age,sex)】注意self没有了
    -
- 多态

    